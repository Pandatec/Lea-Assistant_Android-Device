apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def localIp = ''

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {

        def tagVersionName = System.getenv('GITHUB_REF')

        if (tagVersionName == null || tagVersionName == '' || tagVersionName.startsWith('refs/heads/')) {
            tagVersionName = '0.0.1'
        } else {
            tagVersionName = tagVersionName.replace('refs/tags/v', '').replace('r', '')
        }

        println('Version name: ' + tagVersionName)

        def numbers = tagVersionName.split('\\.')
        def tagVersionCode = Integer.parseInt(numbers[0]) * 1000000 + Integer.parseInt(numbers[1]) * 1000 + Integer.parseInt(numbers[2])

        println('Version code: ' + tagVersionCode)

        applicationId "fr.leassistant.lea_mobile"
        minSdkVersion 18
        targetSdkVersion 31
        versionName tagVersionName
        versionCode tagVersionCode

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
            }
        }
        lintOptions {
            abortOnError false
        }

        def isRelease = System.getenv('RELEASE') == 'true' ? 'true' : 'false'
        buildConfigField "String", "RELEASE", '"' + isRelease + '"'
        buildConfigField "String", "VERSION", '"' + tagVersionName + '"'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation files('libs/opus.aar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.github.kittinunf.fuel:fuel:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
    implementation "com.google.android.gms:play-services-location:18.0.0"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    testImplementation 'androidx.test:core:1.0.0'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.json:json:20080701'
}

task writeBaseNetworkSecurityConfig(type: Copy) {
    from "${projectDir}/src/main/res/xml/network/network_security_config.xml"
    into "${projectDir}/src/main/res/xml/"
}

task writeNetworkSecurityConfig()  {
    dependsOn writeBaseNetworkSecurityConfig
    doLast {

        def bail = ""
        if (localIp != '') {
            bail =
                    """    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">$localIp</domain>
    </domain-config>
"""
        }

        file("${projectDir}/src/main/res/xml/network_security_config.xml").write(
                """<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
$bail</network-security-config>
""")
    }
}

preBuild.dependsOn writeNetworkSecurityConfig